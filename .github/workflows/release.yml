name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: kdx
            asset_name: kdx-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: kdx
            asset_name: kdx-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: kdx
            asset_name: kdx-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.87.0
      with:
        components: rustfmt, clippy
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Create archive
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        cd ../../..

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}.tar.gz
        retention-days: 1

  release:
    name: Create Release and Upload Assets
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*/*.tar.gz
        tag_name: ${{ github.ref_name }}
        name: kdx ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout homebrew-kdx repository
      uses: actions/checkout@v4
      with:
        repository: brannn/homebrew-kdx
        token: ${{ secrets.GITHUB_TOKEN }}
        path: homebrew-kdx

    - name: Get release information
      id: release_info
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

        # Get SHA256 hashes from the release assets
        MACOS_ARM64_SHA=$(curl -sL "https://github.com/brannn/kdx/releases/download/v$VERSION/kdx-macos-aarch64.tar.gz" | sha256sum | cut -d' ' -f1)
        MACOS_X86_64_SHA=$(curl -sL "https://github.com/brannn/kdx/releases/download/v$VERSION/kdx-macos-x86_64.tar.gz" | sha256sum | cut -d' ' -f1)
        LINUX_X86_64_SHA=$(curl -sL "https://github.com/brannn/kdx/releases/download/v$VERSION/kdx-linux-x86_64.tar.gz" | sha256sum | cut -d' ' -f1)

        echo "macos_arm64_sha=$MACOS_ARM64_SHA" >> $GITHUB_OUTPUT
        echo "macos_x86_64_sha=$MACOS_X86_64_SHA" >> $GITHUB_OUTPUT
        echo "linux_x86_64_sha=$LINUX_X86_64_SHA" >> $GITHUB_OUTPUT

    - name: Update Homebrew formula
      run: |
        cd homebrew-kdx

        # Update the formula with new version and SHA256 hashes
        cat > Formula/kdx.rb << 'EOF'
        class Kdx < Formula
          desc "K8s Discovery Experience - A command-line tool for exploring Kubernetes clusters"
          homepage "https://github.com/brannn/kdx"
          version "${{ steps.release_info.outputs.version }}"
          license "MIT"

          on_macos do
            if Hardware::CPU.arm?
              url "https://github.com/brannn/kdx/releases/download/${{ steps.release_info.outputs.tag }}/kdx-macos-aarch64.tar.gz"
              sha256 "${{ steps.release_info.outputs.macos_arm64_sha }}"
            else
              url "https://github.com/brannn/kdx/releases/download/${{ steps.release_info.outputs.tag }}/kdx-macos-x86_64.tar.gz"
              sha256 "${{ steps.release_info.outputs.macos_x86_64_sha }}"
            end
          end

          on_linux do
            if Hardware::CPU.intel?
              url "https://github.com/brannn/kdx/releases/download/${{ steps.release_info.outputs.tag }}/kdx-linux-x86_64.tar.gz"
              sha256 "${{ steps.release_info.outputs.linux_x86_64_sha }}"
            end
          end

          def install
            bin.install "kdx"
          end

          test do
            system "#{bin}/kdx", "--version"
          end
        end
        EOF

    - name: Commit and push changes
      run: |
        cd homebrew-kdx
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add Formula/kdx.rb
        git commit -m "Update kdx to version ${{ steps.release_info.outputs.version }}"
        git push


